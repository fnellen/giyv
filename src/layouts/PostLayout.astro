---
import { Image } from "astro:assets";
import FormattedDate from "../components/shared/FormattedDate.astro";
import type Article from "../interfaces/article";
import BaseLayout from "./BaseLayout.astro";
import Container from "../components/shared/Container.astro";
import Paragraph from "../components/shared/Paragraph.astro";
import Icon from "astro-icon";
import { l, t } from "astro-i18n";
import { SITE_URL } from "../config";
import type SEOProps from "../interfaces/seoProps";

export interface Props extends Article {}

function fixedEncodeURIComponent(str: string) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}

const article = Astro.props;
const articleUrl =
  SITE_URL +
  l("blog", undefined, { targetLocale: article.attributes.locale }) +
  "/" +
  article.attributes.slug;

let socials = [
  {
    name: "Facebook",
    icon: "ic:baseline-facebook",
    url: `https://www.facebook.com/sharer/sharer.php?u=${articleUrl}`,
  },
  {
    name: "Twitter",
    icon: "mdi:twitter",
    url: `https://twitter.com/intent/tweet?url=${articleUrl}&text=${article.attributes.title}`,
  },
  {
    name: "LinkedIn",
    icon: "mdi:linkedin",
    url: `https://www.linkedin.com/sharing/share-offsite/?url=${fixedEncodeURIComponent(
      articleUrl,
    )}`,
  },
  {
    name: "WhatsApp",
    icon: "ic:baseline-whatsapp",
    url: `https://wa.me/?text=${fixedEncodeURIComponent(
      "Check this German-Italian Young Voices article out: " +
        article.attributes.title,
    )}%20${articleUrl}`,
  },
  {
    name: "Email",
    icon: "ic:outline-email",
    url: `mailto:?subject=Read this article about: s${article.attributes.title}&body=${articleUrl}${article.attributes.excerpt}`,
  },
];

const localizations =
  article.attributes.localizations &&
  article.attributes.localizations.data.map((loc) => {
    return {
      href:
        SITE_URL +
        l("blog", undefined, {
          targetLocale: loc.attributes.locale,
        }) +
        "/" +
        loc.attributes.slug,
      hrefLang: loc.attributes.locale,
    };
  });

const seo: SEOProps = {
  title: article.attributes.seo.metaTitle
    ? article.attributes.seo.metaTitle
    : article.attributes.title,
  description: article.attributes.seo.metaDescription
    ? article.attributes.seo.metaDescription
    : article.attributes.excerpt,
  image: article.attributes.seo.metaImage
    ? article.attributes.seo.metaImage.data.attributes.url
    : article.attributes.featuredImage.data.attributes.url,
  localizations: localizations,
  noindex: false,
  nofollow: false,
  ogBasic: {
    type: "article",
    title: article.attributes.title,
    image: article.attributes.featuredImage.data.attributes.url,
    url: articleUrl,
  },
  ogOptional: {
    audio: undefined,
    description: article.attributes.excerpt,
    locale: article.attributes.locale,
  },
  ogArticle: {
    publishedTime: article.attributes.publishedAt,
    modifiedTime: article.attributes.updatedAt,
    expirationTime: undefined,
    author: article.attributes.group.data.attributes.authors.data.map(
      (author) => {
        return author.attributes.name;
      },
    ),
    section: article.attributes.group.data.attributes.Name,
    tags: article.attributes.tags
      ? article.attributes.tags.split(",").map((tag) => tag.trim())
      : undefined,
  },
  twitter: {
    card: "summary_large_image",
    site: "@giyv_eu",
    title: article.attributes.title,
    description: article.attributes.excerpt,
    image: article.attributes.featuredImage.data.attributes.url,
    imageAlt: article.attributes.featuredImage.data.attributes.alternativeText,
  },
  extend: undefined,
};
---

<BaseLayout {...seo}>
  <script type="module">
    await import("/pagefind/pagefind-highlight.js");
    new PagefindHighlight({ highlightParam: "highlight" });
  </script>
  <script>
    let prog = document.getElementById("progress");

    let body = document.body,
      html = document.documentElement;

    let height = Math.max(
      html.clientHeight,
      html.scrollHeight,
      html.offsetHeight,
    );

    const setProgress = () => {
      let scrollFromTop =
        (document.documentElement.scrollTop || body.scrollTop) +
        html.clientHeight;
      let width = (scrollFromTop / height) * 100 + "%";
      //@ts-ignore
      prog.style.width = width;
    };

    window.addEventListener("scroll", setProgress);

    setProgress();
  </script>

  <!-- <section class="relative pt-8 lg:pt-8"></section> -->
  <Container className={"flex flex-col lg:flex-row gap-10 lg:gap-12"}>
    <article
      class="min-w-full md:py-4 sm:max-w-none md:max-w-none mb-3 flex flex-col justify-center items-center gap-12"
    >
      <header>
        <div class="flex items-center text-sm gap-2 mb-8">
          <a href={l("/blog")} class="underline">
            <Paragraph className="text-sm">BLOG</Paragraph></a
          >
          <Icon
            name="ant-design:right-outlined "
            class="w-3 h-3 dark:text-white"
          />
          <Paragraph>
            {article.attributes.title.substring(0, 40) + "..."}
          </Paragraph>
        </div>
        <div
          class="flex flex-col gap-8 items-start lg:flex-row lg:gap-32 items-center"
        >
          <div class="flex flex-col gap-8 lg:w-1/2">
            <div class="flex flex-col gap-2">
              <Paragraph className="text-sm ">
                {t("article.published_at")}
                <FormattedDate
                  date={new Date(article.attributes.publishedAt)}
                  locale={article.attributes.locale}
                />
                 - {article.attributes.readingTime.replace("read", "")}
                {t("article.read_time")}
              </Paragraph>
              <h1
                class="text-3xl/tight sm:text-4xl/tight md:text-5xl/tight xl:text-6xl/tight
             font-bold text-heading-1"
              >
                {article.attributes.title}
              </h1>
            </div>
            <Paragraph>
              {article.attributes.excerpt}
            </Paragraph>
          </div>
          <Image
            src={article.attributes.featuredImage.data.attributes.url}
            alt={article.attributes.featuredImage.data.attributes
              .alternativeText || "No alt text"}
            width={500}
            height={300}
            loading="eager"
            class="rounded-md lg:w-1/2"
            transition:name={"blogImg" + article.id}
          />
          <div
            class="flex flex-row gap-2 lg:hidden justify-center items-center align-center"
          >
            <p class="font-bold uppercase text-gray-600 dark:text-white">
              {t("article.share")}
            </p>
            {
              socials.map((social) => {
                return (
                  <a
                    href={social.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex items-center gap-2 hover:text-blue-600 text-gray-600 dark:text-white"
                  >
                    <Icon
                      name={social.icon}
                      class="w-6 h-6 fill-gray-600 hover:fill-blue-600 dark:text-white"
                      aria-hidden="true"
                    />
                  </a>
                );
              })
            }
          </div>
        </div>
      </header>
      <hr class="w-full border-gray-300 dark:border-gray-700" />
      <div class="lg:grid lg:grid-cols-3 lg:gap-32 sm:grid-cols-1 sm:gap-16">
        <div class="col-span-2">
          <slot />
        </div>
        <div class="col-span-1 order-first">
          <div class="flex flex-col gap-4">
            {
              article.attributes.localizations?.data.length > 0 && (
                <>
                  <Paragraph className="font-bold uppercase text-gray-600 dark:text-white">
                    {t("article.available_in")}
                  </Paragraph>
                  <div class="flex flex-row gap-2">
                    {article.attributes.localizations &&
                      article.attributes.localizations.data.map((loc) => {
                        return (
                          <a
                            href={
                              SITE_URL +
                              l("blog", undefined, {
                                targetLocale: loc.attributes.locale,
                              }) +
                              "/" +
                              loc.attributes.slug
                            }
                            class="flex items-center gap-2 text-gray-600 hover:text-blue-600"
                          >
                            <Paragraph>{loc.attributes.locale}</Paragraph>
                          </a>
                        );
                      })}
                  </div>
                </>
              )
            }
            {
              article.attributes.instagramPost.length > 0 && (
                <>
                  <Paragraph className="font-bold uppercase text-gray-600 dark:text-white">
                    {t("article.check_out_post")}
                  </Paragraph>
                  <div class="w-full">
                    {article.attributes.instagramPost.map((post) => {
                      return (
                        <>
                          <blockquote
                            class="instagram-media"
                            data-instgrm-version="14"
                          >
                            <a href={post.url} />
                          </blockquote>
                          <script
                            type="text/plain"
                            data-category="social"
                            data-service="Instagram"
                            src="//www.instagram.com/embed.js"
                          />
                        </>
                      );
                    })}
                  </div>
                </>
              )
            }
            <Paragraph
              className="font-bold uppercase text-gray-600 dark:text-white"
            >
              {t("article.follow_us")}
            </Paragraph>
            <a
              href="https://www.instagram.com/giyv_eu/"
              target="_blank"
              class="text-gray-600"
            >
              <Icon
                name="mdi:instagram"
                class="w-6 h-6 fill-gray-600 hover:text-blue-600"
              />
            </a>
            <Paragraph
              className="font-bold uppercase text-gray-600 dark:text-white"
            >
              {t("article.share")}
            </Paragraph>
            <div class="flex flex-row gap-2">
              {
                socials.map((social) => {
                  return (
                    <a
                      href={social.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="flex items-center gap-2 text-gray-600 hover:text-blue-600"
                    >
                      <Icon
                        name={social.icon}
                        class="w-6 h-6 fill-gray-600 hover:fill-blue-600"
                        aria-hidden="true"
                      />
                    </a>
                  );
                })
              }
            </div>
            <Paragraph
              className="font-bold uppercase text-gray-600 dark:text-white"
            >
              {t("article.written_by")}
            </Paragraph>
            <Paragraph className="underline">
              {article.attributes.group.data.attributes.Name}
            </Paragraph>
            <Paragraph>
              {article.attributes.group.data.attributes.Description}
            </Paragraph>
            <Paragraph
              className="font-bold uppercase text-gray-600 dark:text-white"
            >
              {t("article.authors")}
            </Paragraph>
            {
              article.attributes.group.data.attributes.authors.data
                .sort((a, b) =>
                  a.attributes.name.localeCompare(b.attributes.name),
                )
                .map((author) => {
                  return (
                    <>
                      <Paragraph>{author.attributes.name}</Paragraph>
                    </>
                  );
                })
            }
          </div>
        </div>
      </div>
    </article>
  </Container>
</BaseLayout>
